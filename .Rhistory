resultForSingleState<-rankall('heart failure')
str(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
str(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
str(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
str(resultForSingleState)
(resultForSingleState)
(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
head(resultForSingleState)
tail(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
resultForSingleState<-rankall('heart failure')
head(resultForSingleState)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
sh=rankall('heart failure')
sh
sh=rankall('heart failure',2)
sh
sh=rankall('heart failure','worst')
sh
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
sh=rankall('heart failure','worst')
sh
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
date()
ocm1<-read.csv('outcome-of-care-measures.csv', stringsAsFactors=FALSE);
str(ocm2)
str(ocm1)
ocm2<-subset(ocm1, select=c('Hospital.Name','State','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack','Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure','Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'));
str(ocm2)
ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack=as.numeric(ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
str(ocm2)
ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure=as.numeric(ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia=as.numeric(ocm2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
str(ocm2)
ocm3=ocm2
ocm3$State = factor(ocm3$State)
str(ocm3)
# To do this, first create a wide format data frame:
c1=c(8,4,5);
c2=c(5,7,4);
c3=c(7,9,6);
wideDF=data.frame(c1=c1,c2=c2,c3=c3);
wideDF
longDF = gather(wideDF,treatment,value);
longDF
?gather
longDF = gather(wideDF,treatment,value,c(c1,c2));
longDF
longOCM<=gather(causeOfDeath,mortalityRate,c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
longOCM<-gather(causeOfDeath,mortalityRate,c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
longOCM<-gather(ocm3,causeOfDeath,mortalityRate,c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
str(longOCM)
head(longOCM)
names(ocm3)
names(ocm3)<-c('Hospital.Name',"State","Heart.Attack","Heart.Failure","Pneumonia")
names(ocm3)
longOCM<-gather(ocm3,causeOfDeath,mortalityRate,c(Heart.Attack,Heart.Failure,Pneumonia))
longOCM
head(longOCM)
longOCM<- longOCM[complete.cases(longOCM$mortalityRate),]
head(longOCM)
str(longOCM)
ms
stateData=statex77()
source('~/git/purpleR/p17, Adding Columns, Statex77/p17, Adding Columns, Statex77.R')
stateData=statex77()
stateData
source('~/git/purpleR/p17, Adding Columns, Statex77/p17, Adding Columns, Statex77.R')
stateData=statex77()
str(stateData)
head(stateData)
str(state.x77)
?state.x77
ms$abb<-state.abb
stateData$abb<-state.abb
head(stateData)
subset(stateData, Region==South)
subset(stateData, Region=='South')
southStates =subset(stateData, Region=='South')
southStates =subset(stateData, Div=='Pacific')
pacificStates =subset(stateData, Div=='Pacific')
pacificStates
head(longOCM)
pacificLongOCM = subset(longOCM, State==('AK'|'CA'|'HI'|'OR'|'WA'))
'AL' %in% pacificStates$abb
'AK' %in% pacificStates$abb
longOCM$State %in% pacificStates$abb
pacificLongOCM = subset(longOCM, longOCM$State %in% pacificStates$abb)
head(pacificLongOCM)
str(pacificLongOCM)
tail(pacificLongOCM)
?sample
sampleOCMPacific<-sample(pacificLongOCM, size=25)
pacificLongOCM[,1]
pacificLongOCM[c(1,2),1]
pacificLongOCM[c(1,2),]
sample(1:1200,10)
str(pacificLongOCM)
sampleIntegers <- sample(1:length(pacificLongOCM[,1]))
sampleIntegers <- sample(1:length(pacificLongOCM[,1]),25)
sampleIntegers
samplePacificLongOCM <- pacificLongOCM[sampleIntegers,]
samplePacificLongOCM
?order
socm=samplePacificLongOCM
order(socm$State)
socm[order(socm$State),]
socm=socm[order(socm$State),]
socm
getwd()
write.csv(socm,file='sampleOutcomeOfMeasures.csv')
socm[,-1]
write.csv(socm,file='sampleOutcomeOfMeasures.csv',row.names=FALSE)
socm=socm[,c(2,1,3,4)]
socm
write.csv(socm,file='sampleOutcomeOfMeasures.csv',row.names=FALSE)
row.names(socm)
row.names(socm)=NULL
socm
write.csv(socm,file='sampleOutcomeOfMeasures.csv')
str(socm)
socm
ddply(socm,c('State','causeOfDeath'),summarise,
n = length(mortalityRate),
meanRate = mean(mortalityRate),
sdRate = sd(mortalityRate),
seRate = sdRate / sqrt(n))
summarySocm= ddply(socm,c('State','causeOfDeath'),summarise,
+ n = length(mortalityRate),
+ meanRate = mean(mortalityRate),
+ sdRate = sd(mortalityRate),
+ seRate = sdRate / sqrt(n))
summarySocm<- ddply(socm,c('State','causeOfDeath'),summarise,
+ n = length(mortalityRate),
+ meanRate = mean(mortalityRate),
+ sdRate = sd(mortalityRate),
+ seRate = sdRate / sqrt(n))
summarySocm= ddply(socm,c('State','causeOfDeath'),summarise,meanRate=mean(mortalityRate)
)
summarySocm
summarySocm= ddply(socm,c('State','causeOfDeath'),summarise,rankRate=which.max(mortalityRate)
)
summarySocm
summarySocm= ddply(socm,c('State','causeOfDeath'),summarise,rankRate=max(mortalityRate)
)
summarySocm
socm
?arrange
remove.packages(plyr)
remove(plyr)
socm
arrange(socm,causeOfDeath,mortalityRate)
arrange(socm,State,causeOfDeath,mortalityRate)
str(socm)
install.packages("xlsx")
?arrange
source('~/git/purpleR/.Rprofile')
getwd()
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.xlsx",method="curl")
dateDownloaded <- date()
library(xlsx)
cameraData <- read.xlsx("./data/cameras.xlsx",sheetIndex=1,header=TRUE)
head(cameraData)
str(cameraData)
x <- 4
class(x)
x <- list(2, "a", "b", TRUE)
str(x)
x[[2]]
x <- 1:4
y <- 2:3
x + y
str(x + y)
setwd("~/git/Assignment-3-Hospital-Quality")
hw1<-read.csv('hw1_data.csv')
str(hw1)
head(hw1)
tail(hw1)
hw1[47,]
count(is.na(hw1$Ozone))
is.na(how1$Ozone)
is.na(hw1$Ozone)
b =is.na(hw1$Ozone)
sum(b)
ozoneCompleteCases = hw1[complete.cases(hw1$Ozone)]
ozoneCompleteCases = hw1[complete.cases(hw1$Ozone,)]
ozoneCompleteCases = hw1[complete.cases(hw1$Ozone),]
ozoneCompleteCases
mean(ozoneCompleteCases$Ozone)
o2 = subset(ozoneCompleteCases, Ozone>31)
o2
o3=subset(o2,Temp>90)
o3
mean(o3$Solar.R)
m6<-subset(hw1,Month==6)
m6
mean(m6$Temp)
m5<-subset(hw1,Month==5)
m5
max(m6$Ozone)
arrange(m6,Ozone)
arrange(m5,Ozone)
swirl()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
skip()
submit()
skip
submit()
submit()
submit()
submit()
submit()
submit()
skip()
setwd("~/git/purpleR/p1-7-Assignment-1-Sulfates-and-Nitrates")
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source('~/git/purpleR/.Rprofile')
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source('~/git/purpleR/p1-7-Assignment-1-Sulfates-and-Nitrates/rprog-scripts-submitscript1 copy.R')
submit()
submit()
submit()
submit()
?submit
remove(swirl)
detach("package:swirl", unload=TRUE)
?submit
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
submit()
submit()
submit()
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
submit()
submit()
submit()
setwd("/var/folders/bI/bIw9JYzeFE8+qPkgD2aPUE+++TI/-Tmp-//RtmpH4ukrP")
setwd("~/git/Assignment-3-Hospital-Quality")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("submitscript3.R")
submit()
best('SC", 'heart attack')
best('SC', 'heart attack')
result=best('SC', 'heart attack')
str(result)
newResult=result$Hospital.Name
newResult
source('~/git/Assignment-3-Hospital-Quality/best.R')
submit()
submit()
source('/var/folders/bI/bIw9JYzeFE8+qPkgD2aPUE+++TI/-Tmp-//RtmpH4ukrP/evaluate.R')
source('/var/folders/bI/bIw9JYzeFE8+qPkgD2aPUE+++TI/-Tmp-//RtmpH4ukrP/evaluate.R')
submit()
source('~/git/Assignment-3-Hospital-Quality/rankhospital.R')
source("rankhospital.R") rankhospital("TX", "heart failure", 4)
source("rankhospital.R"); rankhospital("TX", "heart failure", 4)
source('~/git/Assignment-3-Hospital-Quality/rankhospital.R')
?transform
source('~/git/purpleR/p30-Sorting-Data-Frame-by-more-than-one-column-using-arrange/usingArrange.R')
setwd("~/git/Assignment-3-Hospital-Quality")
socm<-read.csv("sampleOutcomeOfMeasures.csv")
str(socm)
source('~/git/purpleR/p30-Sorting-Data-Frame-by-more-than-one-column-using-arrange/usingArrange.R')
setwd("~/git/purpleR/p30-Sorting-Data-Frame-by-more-than-one-column-using-arrange")
result=usingArrange()
result
source('~/git/purpleR/p30-Sorting-Data-Frame-by-more-than-one-column-using-arrange/usingArrange.R')
setwd("~/git/Assignment-3-Hospital-Quality")
head(rankall("heart attack", 20), 10)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
head(rankall("heart attack", 20), 10)
is.integer(20)
is.numeric(20)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
head(rankall("heart attack", 20), 10)
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
allHospitals=data.frame();
allHospitals<-rbind(allHospitals,rankall("heart attack", 20), 10);
allHospitals<-rbind(allHospitals,rankall("heart attack", 20));
ocm1<-read.csv('sampleOutcomeOfMeasures.csv', stringsAsFactors=FALSE);
ocm2=ocm1[1,]
ocm2
allHospitals<-rbind(allHospitals,ocm2);
allHospitals
?rar
rar<-rankall('heart failure')
subset(ocm1, State=='AL')
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
rar<-rankall('heart failure')
source('~/git/Assignment-3-Hospital-Quality/rankall.R')
swirl
swirl()
library(swirl)
swirl()
bye()
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1=Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(socm)
socm=read.csv('sampleOutcomeOfMeasures.csv',row.names=F)
?read.csv
socm=read.csv('sampleOutcomeOfMeasures.csv')
head(socm)
socm$X = NULL
head(socm)
str(socm)
r1<-ddply(socm,'State',summarise,myStats=mortalityRate)
library(dplyr)
r1<-ddply(socm,'State',summarise,myStats=mortalityRate)
library(plyr)
source('~/git/purpleR/p31-Outcome-of-Care-Measures---Selecting-Hospital-By-Rank/selectByRank.R')
setwd("~/MyR/GettingCleaningData")
setwd("~/MyR/GettingCleaningData/Week1_quiz")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
df <- read.csv('data/housing.csv', stringsAsFactors=F)
View(df)
View(iris)
search()
filter
detach(package::stats, unload=T)
detach(package:stats, unload=T)
detach(package:dplyr, unload=T)
detach(package:stats, unload=T)
search()
library(stats)
library(dplyr)
search()
filter
iris %>% count(Species)
df %>% count(VAL)
result = df %>% count(VAL)
result
View(results)
View(result)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/naturalGas.xlsx",method="curl")
dateDownloaded <- date()
library(xlsx)
colIndex <- 7:15
rowIndex <- 18:23
dat <- read.xlsx("./data/naturalGas.xlsx",sheetIndex=1,header=TRUE, colIndex=colIndex,rowIndex=rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
doc <- xmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(RCurl)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
rootNode[[1]][[2]]
rootNode[[2]][[1]]
rootNode[[1]][[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
allZipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
str(allZipcodes)
data_frame(allZipcodes)
str(allZipcodes)
allZipcodes  = data_frame(allZipcodes)
glimpse(allZipcodes)
zipDf=allZipcodes
zipDf %>% count(allZipcodes)
zipDf %>% count()
zipDf %>% tally
result =zipDf %>% count(allZipcodes)
View(result)
?fread
install.packages("data.table")
search()
library(data.table)
search()
DT <- fread('data/housing.csv', stringsAsFactors=F))
DT <- fread('data/housing.csv', stringsAsFactors=F)
str(DT)
before<-system.time()
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
after<-system.time()
lengthOfTime = after-before;
before<-system.time()
?system.time
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
